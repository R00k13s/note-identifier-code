#include <Wire.h>
#include <LiquidCrystal_I2C.h>

const int numNotes = 84;
const char* notes[] = {"C1", "C#1", "D1", "D#1", "E1", "F1", "F#1", "G1", "G#1", "A1", "A#1", "B1",
                       "C2", "C#2", "D2", "D#2", "E2", "F2", "F#2", "G2", "G#2", "A2", "A#2", "B2",
                       "C3", "C#3", "D3", "D#3", "E3", "F3", "F#3", "G3", "G#3", "A3", "A#3", "B3",
                       "C4", "C#4", "D4", "D#4", "E4", "F4", "F#4", "G4", "G#4", "A4", "A#4", "B4",
                       "C5", "C#5", "D5", "D#5", "E5", "F5", "F#5", "G5", "G#5", "A5", "A#5", "B5",
                       "C6", "C#6", "D6", "D#6", "E6", "F6", "F#6", "G6", "G#6", "A6", "A#6", "B6",
                       "C7", "C#7"};

const int noteFrequencies[] = {32, 34, 36, 38, 41, 43, 46, 49, 51, 55, 58, 61,
                               65, 69, 73, 77, 82, 87, 92, 98, 104, 110, 117, 123, 
                               130, 138, 146, 155, 164, 174, 185, 196, 207, 220, 233, 247,
                               261, 277, 293, 311, 329, 349, 369, 391, 415, 440, 466, 493,
                               523, 554, 587, 622, 659, 698, 739, 783, 830, 880, 932, 987,
                               1046, 1108, 1174, 1244, 1318, 1396, 1479, 1567, 1661, 1760, 1864, 1975,
                               2093, 2217, 2349};

const int tolerance = 10;

LiquidCrystal_I2C lcd(0x27, 16, 2);

#define SAMPLES 128
#define SAMPLING_FREQUENCY 4096

unsigned int samplingPeriod;
unsigned long microSeconds;

double vReal[SAMPLES];
double vImag[SAMPLES];

void setup() {
    Serial.begin(115200); // Initialize serial communication
    lcd.init();
    lcd.backlight();
    samplingPeriod = round(1000000 * (1.0 / SAMPLING_FREQUENCY));
}

void loop() {
  // Sample SAMPLES times
  for (int i = 0; i < SAMPLES; i++) {
    microSeconds = micros();
    
    vReal[i] = analogRead(0);
    vImag[i] = 0;
    
    while (micros() < (microSeconds + samplingPeriod)) {
      // Wait for the next sample period
    }
  }

    // Send data to Python
    for (int i = 0; i < SAMPLES; i++) {
        Serial.println(vReal[i]);
    }

    // Wait for the fundamental frequency from Python
    while (Serial.available() == 0) {
        // Wait for data
    }

    double fundamentalFrequency = Serial.parseFloat();

    // Display the result
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Detected note:");
    lcd.setCursor(0, 1);
    int fq = round(fundamentalFrequency) - 10;
    lcd.print(notes[findClosestNoteIndex(fq)]);
    lcd.setCursor(4, 1);
    lcd.print(round(fundamentalFrequency));
    delay(1500);
    lcd.setCursor(7, 1);
    lcd.print("                ");
    lcd.setCursor(2, 1);
    lcd.print("  ");
}

// Function to find the index of the closest note
int findClosestNoteIndex(int frequency) {
    int closestNoteIndex = 0;
    int smallestDifference = abs(frequency - noteFrequencies[0]);

    for (int i = 1; i < numNotes; i++) {
        int difference = abs(frequency - noteFrequencies[i]);
        if (difference < smallestDifference) {
            smallestDifference = difference;
            closestNoteIndex = i;
        }
    }

    return closestNoteIndex;
}
